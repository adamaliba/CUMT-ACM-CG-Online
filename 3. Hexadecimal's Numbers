#include<iostream>
using namespace std;
int z=1;
void bin(int leng)
{
	int i,t=1;
	for(i=1;i<leng;i++)
		t*=2;
	z+=t;
	if(leng>1)
		bin(leng-1);
	else
		cout<<z;
}
int length(int n)
{
	int i=0;
	while(n>0)
	{
		n=n/10;
		i++;
	}
	return i;
}
int d(int s)
{
	int i=0;
	while(s>0)
	{
		if(s%10!=1&&s%10!=0)
			i++;
		s/=10;
	}
	return i;
}
int main()
{
	int n,t=1,i=0,j,s=1,leng;
	cin>>n;
	leng=length(n);
	for(j=1;j<leng;j++)
	{	
		s*=10;
		z*=2;
	}
	if(s+s/5<n)
		bin(leng-1);
	else
	{	
		while(s<n)
		{
			if(t==-1)
				s+=9;
			else
				s+=1;
			if(d(s)==0&&s<=n)
				i++;
			t*=-1;
		}
		cout<<i+z;
	}
	return 0;
}


/*time limit per test
1 second
memory limit per test
64 megabytes
input
standard input
output
standard output
One beautiful July morning a terrible thing happened in Mainframe: a mean virus Megabyte somehow got access to the memory of his not less mean sister Hexadecimal. He loaded there a huge amount of n different natural numbers from 1 to n to obtain total control over her energy.

But his plan failed. The reason for this was very simple: Hexadecimal didn't perceive any information, apart from numbers written in binary format. This means that if a number in a decimal representation contained characters apart from 0 and 1, it was not stored in the memory. Now Megabyte wants to know, how many numbers were loaded successfully.

Input
Input data contains the only number n (1≤n≤109).

Output
Output the only number − answer to the problem.

Examples
Input
10
Output
2
Note
For n = 10 the answer includes numbers 1 and 10.*/
